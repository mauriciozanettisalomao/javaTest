<?xml version="1.0" encoding="UTF-8"?>  
<beans xmlns="http://www.springframework.org/schema/beans"  
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"  
       xmlns:batch="http://www.springframework.org/schema/batch"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="
       		http://www.springframework.org/schema/beans   
	   		http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
			http://www.springframework.org/schema/context 
			http://www.springframework.org/schema/context/spring-context-4.3.xsd		   		  
            http://www.springframework.org/schema/batch   
            http://www.springframework.org/schema/batch/spring-batch-3.0.xsd
        	http://www.springframework.org/schema/jdbc
        	http://www.springframework.org/schema/jdbc/spring-jdbc-4.3.xsd
	        http://www.springframework.org/schema/tx
	        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<context:annotation-config />
	<context:property-placeholder location="classpath:config/database.properties" />
	<context:component-scan base-package="br.com.nextel.samplebatchapp.db" />	
	
	<!-- Database Configuration -->
	
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.spring-batch.driverClassName}" />
		<property name="url" value="${jdbc.spring-batch.url}" />
		<property name="username" value="${jdbc.spring-batch.user}" />
		<property name="password" value="${jdbc.spring-batch.pass}" />
	</bean>
 
 	<bean id="oracleDataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="${jdbc.business.driverClassName}" />
		<property name="url" value="${jdbc.business.url}" />
		<property name="username" value="${jdbc.business.user}" />
		<property name="password" value="${jdbc.business.pass}" />
	</bean>
 
	<tx:annotation-driven />
	<bean id="transactionManager"
		class="org.springframework.batch.support.transaction.ResourcelessTransactionManager" />	
	
	<!-- 
	<jdbc:initialize-database data-source="dataSource">
		<jdbc:script location="org/springframework/batch/core/schema-drop-mysql.sql" />
		<jdbc:script location="org/springframework/batch/core/schema-mysql.sql" />
	</jdbc:initialize-database>	
 	-->	

	<!-- Spring Batch Configuration -->
	
	<bean id="jobRepository"
		class="org.springframework.batch.core.repository.support.JobRepositoryFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="transactionManager" ref="transactionManager" />
		<property name="databaseType" value="mysql" />
	</bean>
 
	<bean id="jobLauncher"
		class="org.springframework.batch.core.launch.support.SimpleJobLauncher">
		<property name="jobRepository" ref="jobRepository" />
	</bean>
        
	<bean id="reader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">  
		<property name="resource" value="file:/home/input/orders.csv" />  
		<property name="linesToSkip" value="1" />  
		<property name="lineMapper">  
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">  
				<property name="lineTokenizer">  
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">  
						<property name="names" value="CUST_ID,ORDERNUM,COUNTRY" />  
						<property name="delimiter" value="," />  
					</bean>  
				</property>  
				<property name="fieldSetMapper">  
					<bean class="br.com.nextel.samplebatchapp.job.mapper.OrderDataMapper" />  
				</property>  
			</bean>  
		</property>  
	</bean>  
	  
	<bean id="writer" class="br.com.nextel.samplebatchapp.job.writer.OrderItemWriter">  
		<constructor-arg ref="dataSource" />
	</bean>

	<bean id="outBoundDatabaseReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="dataSource"/>
		<property name="sql" value="SELECT ID, NAME, VALUE, CREATE_DATE FROM OUTBOUND"/>
    	<property name="rowMapper">
        	<bean class="br.com.nextel.samplebatchapp.job.mapper.OutboundRowMapper"/>
    	</property>
	</bean>

	<bean id="outBoundProcessor" class="br.com.nextel.samplebatchapp.job.processor.OutboundProcessor" />

	<bean id="outBoundFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:/home/output/outbound.csv" />
		<property name="shouldDeleteIfExists" value="true" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor">
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names" value="id,name,firstName,lastName,value,createDate" />
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<bean id="InboundReader" class="org.springframework.batch.item.file.FlatFileItemReader" scope="step">  
		<property name="resource" value="file:/home/input/inbound.csv" />  
		<property name="linesToSkip" value="0" />  
		<property name="lineMapper">
			<bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">  
				<property name="lineTokenizer">  
					<bean class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">  
						<property name="names" value="name, task, description, init_value, create_date" />  
						<property name="delimiter" value=";" />
					</bean>
				</property>
				<property name="fieldSetMapper">
					<bean class="br.com.nextel.samplebatchapp.job.mapper.InboundDataMapper" />  
				</property>  
			</bean>  
		</property>  
	</bean>

	<bean id="inboundWriter"	class="org.springframework.batch.item.database.JdbcBatchItemWriter">
		<property name="dataSource" ref="dataSource" />
		<property name="sql">
		  <value>
		         <![CDATA[		         	
		         	insert into INBOUND(NAME, TASK, DESCRIPTION, INIT_VALUE, CREATE_DATE) 
					values (:name, :task, :description, :initValue, :createDate)
		         ]]>
		  </value>
		</property>			
		<property name="itemSqlParameterSourceProvider">
			<bean class="org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider" />
		</property>
	</bean>

	<bean id="portabilityDatabaseReader" class="org.springframework.batch.item.database.JdbcCursorItemReader">
		<property name="dataSource" ref="oracleDataSource"/>
		<property name="sql" value="SELECT SQ_PORTABILITY_REGISTER, NR_PROTOCOL, CD_PORTABILITY_TYPE, CD_MOBILE_OPERATOR_IN, CD_MOBILE_OPERATOR_OUT, NR_PHONE_PORTABILITY, NR_PHONE_TEMPORARY, NR_PHONE_SMS, CD_TICKET, TP_CUSTOMER, NR_CUSTOMER_DOCUMENT, NM_CUSTOMER, CD_EOT, DT_INTERVAL_PORTABILITY, DT_PORTABILITY_APPLY, CD_PORTABILITY_STATUS_CURRENT, DT_CREATED FROM NPS.TNPS_PORTABILITY_REGISTER WHERE DT_CREATED IS NOT NULL" /> 
		<property name="rowMapper">
        	<bean class="br.com.nextel.samplebatchapp.job.mapper.PortabilityRegisterRowMapper"/>
    	</property>
	</bean>

	<bean id="portabilityFileItemWriter" class="org.springframework.batch.item.file.FlatFileItemWriter">
		<property name="resource" value="file:/home/output/portability.csv" />
		<property name="shouldDeleteIfExists" value="true" />
		<property name="lineAggregator">
			<bean class="org.springframework.batch.item.file.transform.DelimitedLineAggregator">
				<property name="delimiter" value="," />
				<property name="fieldExtractor"> 
					<bean class="org.springframework.batch.item.file.transform.BeanWrapperFieldExtractor">
						<property name="names">
							<value>
								<![CDATA[
									sqPortabilityRegister,nrProtocol,cdPortabilityType,cdMobileOperatorIn,cdMobileOperatorOut,nrPhonePortability,
									nrPhoneTemporary,nrPhoneSms,cdTicket,tpCustomer,nrCustomerDocument,nmCustomer,cdEot,dtIntervalPortability,
									dtPortabilityApply,cdPortabilityStatusCurrent,dtCreated			
								]]>
							</value>
						</property>
					</bean>
				</property>
			</bean>
		</property>
	</bean>

	<batch:job id="hellojob">
		<batch:step id="orderprocessor">  
			<batch:tasklet>  
				<batch:chunk reader="reader" writer="writer" commit-interval="3" skip-limit="2">  
					<batch:skippable-exception-classes>  
						<batch:include class="org.springframework.batch.item.file.FlatFileParseException" />  
					</batch:skippable-exception-classes>  
				</batch:chunk>  
			</batch:tasklet>                 
		</batch:step>  
	</batch:job>

	<batch:job id="inBoundJob">
		<batch:step id="inBoundStep1">  
			<batch:tasklet allow-start-if-complete="true">
				<batch:chunk reader="InboundReader" writer="inboundWriter" commit-interval="10" />
			</batch:tasklet>                 
		</batch:step>  
	</batch:job>

	<batch:job id="outBoundJob">
		<batch:step id="outBoundStep1">  
			<batch:tasklet allow-start-if-complete="true">
				<batch:chunk reader="outBoundDatabaseReader" processor="outBoundProcessor" writer="outBoundFileItemWriter" commit-interval="10" />
			</batch:tasklet>                 
		</batch:step>  
	</batch:job>

	<batch:job id="portabilityJob">
		<batch:step id="portabilityStep">  
			<batch:tasklet allow-start-if-complete="true">
				<batch:chunk reader="portabilityDatabaseReader" writer="portabilityFileItemWriter" commit-interval="30000" />
			</batch:tasklet>                 
		</batch:step>  
	</batch:job>

</beans>